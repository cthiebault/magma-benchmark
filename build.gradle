import com.sun.org.apache.xalan.internal.xsltc.cmdline.Compile

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'artifactory-publish'
apply plugin: 'idea'
apply plugin: 'project-report'
apply plugin: 'findbugs'

ext {
  javaVersion = '1.6'
  magmaVersion = '1.7-SNAPSHOT'
  slf4jVersion = '1.7.4'
  springVersion = '3.1.4.RELEASE'
}

group = 'org.obiba.magma'

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

buildscript {
  repositories {
    maven { url 'http://repo.obiba.org/obiba-gradle-plugins-release' }
  }
  dependencies {
    classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '2.1.0')
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '1.6'
}

defaultTasks 'build'


configurations {
  pmd
  compile
  runtime
  all*.exclude group: 'commons-logging'
}

dependencies {
  compile('com.google.code.findbugs:jsr305:2.0.1')
  compile('com.google.code.gson:gson:2.2.4')
  compile('com.google.guava:guava:14.0.1')
  compile('javassist:javassist:3.9.0.GA')
  compile('hsqldb:hsqldb:1.8.0.10')
  compile('mysql:mysql-connector-java:5.1.24')
  compile('net.sourceforge.findbugs:annotations:1.3.2')

  compile("org.obiba.magma:magma-api:${magmaVersion}")
  compile("org.obiba.magma:magma-data-generator:${magmaVersion}")
  compile("org.obiba.magma:magma-hibernate-datasource:${magmaVersion}")
  compile("org.obiba.magma:magma-datasource-jdbc:${magmaVersion}")
  compile("org.obiba.magma:magma-datasource-neo4j:${magmaVersion}")

  compile("org.slf4j:slf4j-api:${slf4jVersion}")
  compile("org.slf4j:slf4j-log4j12:${slf4jVersion}")
  compile("org.slf4j:jcl-over-slf4j:${slf4jVersion}")

  compile("org.springframework:spring-orm:${springVersion}")

  testCompile('junit:junit:4.11')

  pmd 'net.sourceforge.pmd:pmd:5.0.3'
}

test {
  testLogging.showStandardStreams = true
}

// Reporting
reporting {
  baseDir "$buildDir/reports"
}

// FindBugs
findbugs {
  reportsDir = file("${reporting.baseDir}/findbugs-output")
  excludeFilter = file(rootProject.file('src/main/resources/findbugs-exclude.xml'))
  ignoreFailures = true
}

// PMD
task pmd << {
  if (!file('src').exists()) return;
  file("${reporting.baseDir}").mkdirs()
  ant {
    taskdef(name: 'pmd', classname: 'net.sourceforge.pmd.ant.PMDTask', classpath: configurations.pmd.asPath)
    pmd(shortFilenames: 'true', failonruleviolation: 'false', rulesetfiles: rootProject.file('src/main/resources/pmd-ruleset.xml').toURI().toString()) {
      formatter(type: 'html', toFile: "${reporting.baseDir}/pmd.html")
      formatter(type: 'xml', toFile: "${reporting.baseDir}/pmd.xml")
      fileset(dir: 'src') {
        include(name: '**/*.java')
      }
    }
  }
}

repositories {
  maven { url 'http://repo.obiba.org/repo' }
  mavenCentral()
  mavenLocal()
}

tasks.withType(Compile) {
  options.encoding = 'UTF-8'
}

jar {
  manifest {
    attributes 'Implementation-Title': project.name,
        'Implementation-Version': project.version,
        'Implementation-Vendor-Id': project.group,
        'Implementation-Vendor': 'OBiBa'
  }
}

// create jar with sources
task packageSources(type: Jar, dependsOn: compileJava) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

// create jar with javadoc
task packageJavadoc(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

// configure publication tu upload binary, POM.xml, sources & javadoc
publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      pom.withXml {
        def Node root = asNode();
        root.appendNode('name', 'magma-benchmark')
        root.appendNode('description', 'Benchmark for Magma Datasources')
        root.appendNode('url', 'http://www.obiba.org')

        def org = root.appendNode('organization')
        org.appendNode('name', 'OBiBa')
        org.appendNode('url', 'http://www.obiba.org')

        def issues = root.appendNode('issueManagement')
        issues.appendNode('system', 'jira')
        issues.appendNode('url', 'http://jira.obiba.org/jira/browse/MAGMA')

        def scm = root.appendNode('scm')
        scm.appendNode('url', 'https://github.com/obiba/magma')
        scm.appendNode('connection', 'scm:git:git://github.com/obiba/magma.git')
        scm.appendNode('developerConnection', 'scm:git:git://github.com/obiba/magma.git')

        def license = root.appendNode('licenses').appendNode('license');
        license.appendNode('name', 'GNU Public License version 3')
        license.appendNode('url', 'http://www.obiba.org/node/62')
        license.appendNode('distribution', 'repo')
      }
      artifact packageSources {
        classifier "sources"
      }
      artifact packageJavadoc {
        classifier "javadoc"
      }
    }
  }
}

// configure artifactory plugin
artifactory {
  contextUrl = 'http://repo.obiba.org'
  publish {
    repository {
      // these settings are overridden by Artifactory Jenkins plugin
      repoKey = 'libs-snapshot-local'
      username = 'user'
      password = 'password'
    }
    defaults {
      publications('mavenJava')
    }
  }
  resolve {
    contextUrl = 'http://repo.obiba.org'
    repository {
      repoKey = 'libs-releases'
    }
  }
}
