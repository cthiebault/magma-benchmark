import com.sun.org.apache.xalan.internal.xsltc.cmdline.Compile

apply plugin: 'idea'
apply plugin: 'project-report'
apply plugin: 'application'
apply plugin: 'versions'

buildscript {
  repositories {
    maven { url 'http://repo.obiba.org/obiba-gradle-plugins-release' }
  }
  dependencies {
    classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:2.1.0'
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.4'
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '1.9'
}

ext {
  magmaVersion = '1.8-SNAPSHOT'
  slf4jVersion = '1.7.5'
}

mainClassName = 'org.obiba.magma.benchmark.MagmaBenchmark'

allprojects {
  apply plugin: 'java'
  apply plugin: 'maven'
  apply plugin: 'maven-publish'
  apply plugin: 'artifactory-publish'

  group = 'org.obiba.magma.benchmark'

  sourceCompatibility = JavaVersion.VERSION_1_6
  targetCompatibility = JavaVersion.VERSION_1_6

  defaultTasks 'build'

  repositories {
    mavenLocal()
    maven { url 'http://repo.obiba.org/repo' }
    mavenCentral()
  }

  tasks.withType(Compile) {
    options.encoding = 'UTF-8'
  }

  configurations {
    compile
    runtime
    all*.exclude group: 'commons-logging'
  }

  jar {
    manifest {
      attributes 'Implementation-Title': project.name,
          'Implementation-Version': project.version,
          'Implementation-Vendor-Id': project.group,
          'Implementation-Vendor': 'OBiBa'
    }
  }

  test {
    testLogging.showStandardStreams = true
  }

  // support incremental build for test task and artifactoryPublish
  // see http://www.practicalgradle.org/blog/2011/06/incremental-tests-with-jenkins/
  task jenkinsTest {
    inputs.files test.outputs.files
    doLast {
      def timestamp = System.currentTimeMillis()
      if (test.testResultsDir.exists()) {
        test.testResultsDir.eachFile { it.lastModified = timestamp }
      }
      if (test.testReportDir.exists()) {
        test.testReportDir.eachFile { it.lastModified = timestamp }
      }
    }
  }
  build.dependsOn(jenkinsTest)
  artifactoryPublish.dependsOn(jenkinsTest)

  // create jar with sources
  task packageSources(type: Jar, dependsOn: compileJava) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  // create jar with javadoc
  task packageJavadoc(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
  }

  artifacts {
    archives packageSources
    archives packageJavadoc
  }

  // configure publication tu upload binary, POM.xml, sources & javadoc
  publishing {
    publications {
      mavenJava(MavenPublication) {
        from components.java
        pom.withXml {
          def Node root = asNode();
          root.appendNode('name', 'magma-benchmark')
          root.appendNode('description', 'Benchmark for Magma abstraction layer')
          root.appendNode('url', 'http://www.obiba.org')

          def org = root.appendNode('organization')
          org.appendNode('name', 'OBiBa')
          org.appendNode('url', 'http://www.obiba.org')

          def issues = root.appendNode('issueManagement')
          issues.appendNode('system', 'jira')
          issues.appendNode('url', 'http://jira.obiba.org/jira/browse/MAGMA')

          def scm = root.appendNode('scm')
          scm.appendNode('url', 'https://github.com/obiba/magma-benchmark')
          scm.appendNode('connection', 'scm:git:git://github.com/obiba/magma-benchmark.git')
          scm.appendNode('developerConnection', 'scm:git:git://github.com/obiba/magma-benchmark.git')

          def license = root.appendNode('licenses').appendNode('license');
          license.appendNode('name', 'GNU Public License version 3')
          license.appendNode('url', 'http://www.obiba.org/node/62')
          license.appendNode('distribution', 'repo')
        }
        artifact packageSources {
          classifier "sources"
        }
        artifact packageJavadoc {
          classifier "javadoc"
        }
      }
    }
  }

  // configure artifactory plugin
  artifactory {
    contextUrl = 'http://repo.obiba.org'
    publish {
      repository {
        // these settings are overridden by Artifactory Jenkins plugin
        repoKey = 'libs-snapshot-local'
        username = 'user'
        password = 'password'
      }
      defaults {
        publications('mavenJava')
      }
    }
    resolve {
      contextUrl = 'http://repo.obiba.org'
      repository {
        repoKey = 'libs-releases'
      }
    }
  }

}

rootProject.dependencies {
  compile project(':magma-benchmark-atomikos')
  compile project(':magma-benchmark-jotm:magma-benchmark-jotm-tomcat-jdbc')
  compile project(':magma-benchmark-jotm:magma-benchmark-jotm-commons-dbcp')
  compile project(':magma-benchmark-jbossts:magma-benchmark-jbossts-tomcat-jdbc')
  compile project(':magma-benchmark-jbossts:magma-benchmark-jbossts-commons-dbcp')
}

subprojects { subProject ->

  dependencies {
    // for snapshot, see http://java.dzone.com/articles/deploying-artifact-local-cache
    compile('com.google.code.findbugs:jsr305:2.0.1')
    compile('com.google.code.gson:gson:2.2.4')
    compile('com.google.guava:guava:15.0')
    compile('joda-time:joda-time:2.3')
    compile('net.sourceforge.findbugs:annotations:1.3.2')
    compile('org.hibernate:hibernate-ehcache:4.2.5.Final')
    compile("org.obiba.magma:magma-api:${magmaVersion}")
    compile("org.obiba.magma:magma-data-generator:${magmaVersion}")
    compile("org.obiba.magma:magma-datasource-hibernate:${magmaVersion}")
    compile("org.obiba.magma:magma-datasource-jdbc:${magmaVersion}")
    compile("org.slf4j:slf4j-api:${slf4jVersion}")
    compile('org.springframework:spring-orm:3.2.5.RELEASE')
    compile('org.springframework.batch:spring-batch-core:2.2.2.RELEASE')

    runtime('ch.qos.logback:logback-classic:1.0.13')
    runtime('javassist:javassist:3.12.1.GA')
//    runtime('mariadb:mariadb-java-client:1.1.4')
    runtime('mysql:mysql-connector-java:5.1.26')
    runtime('net.sf.ehcache:ehcache-core:2.6.6')
    runtime('org.hsqldb:hsqldb:2.3.0')
//    runtime('org.postgresql:postgresql:9.2-1003-jdbc4')
    runtime("org.slf4j:slf4j-api:${slf4jVersion}")
    runtime("org.slf4j:jcl-over-slf4j:${slf4jVersion}")
  }

}
